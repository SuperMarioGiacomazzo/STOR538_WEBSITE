3/2.6
2.6/3
3-2.6
0.4/3
0.95/0.05
95/5
0.5*0.95
0.5*0.9
0.45/(1-0.45)
(1-0.45)/0.45
45/9
55/5
45/5
0.55/0.45
100/220
100/110
1/0.91+((0.91-1)/0.91)*0.6
1/1+((1-1.1)/1)*0.6
1/1+((1-1.1)/1.1)*0.6
(0.6*1-0.4*1.1)/(1.1)
1/1.1
(0.6*0.91-0.4*1)/0.91
(0.6*0.9090909-0.4*1)/0.9090909
(0.6*1/1.1-0.4*1)/(1/1.1)
0.6/1.1+0.4/1
0.6/1.1-0.4/1
1/1+(1/1.1+1)*0.6
-1/1+(1/1.1+1)*0.6
-1/0.909+(1/1+1/0.909)*0.6
(0.6*0.909-0.4*1)/(0.909*1)
(0.48*0.909-0.52*1)/(0.909*1)
(0.95*0.909-0.05*1)/(0.909*1)
(0.95*1-0.05*1.1)/1.1
0.6*log(1+0.05*0.909)+0.4*log(1-0.05*1)
0.6*log(1+0.3*0.909)+0.4*log(1-0.3*1)
0.6*log(1+0.3*0.909)+0.4*log(1-0.4*1)
0.6*log(1+0.3*0.909)+0.4*log(1-0.32*1)
0.6*log(1+0.45*0.909)+0.4*log(1-0.45*1)
0.6*log(1+0.45*1)+0.4*log(1-0.45*1.1)
0.6*log(1+0.3*1)+0.4*log(1-0.3*1.1)
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
# Data for Part 1
VIOLENT=read_csv("FINAL_VIOLENT.csv")
ZIP=read_csv("FINAL_ZIP.csv")
STATE_ABBREV=read_csv("FINAL_STATE_ABBREV.csv")
CENSUS=read_csv("FINAL_CENSUS.csv")
S_VS_D=read_csv("FINAL_SAFE_VS_DANGEROUS.CSV")
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
VIOLENT2 = anti_join(VIOLENT,S_VS_D,by=c("State"="STATE"))
str(VIOLENT2)
View(VIOLENT2)
View(VIOLENT)
View(CENSUS)
View(CENSUS)
View(CENSUS)
VIOLENT3=VIOLENT2 %>% mutate(City=ifelse(City=="Louisville Metro","Louisville",City),
City=ifelse(City=="Nashville Metropolitan","Nashville",City))
VIOLENT4 = left_join(VIOLENT3,CENSUS,by=c("State"="State","City"="Name"))
View(VIOLENT4)
View(CENSUS)
View(VIOLENT3)
View(VIOLENT4)
View(CENSUS)
View(VIOLENT2)
View(VIOLENT2)
View(VIOLENT3)
View(VIOLENT4)
FINAL.VIOLENT = left_join(left_join(VIOLENT4,STATE_ABBREV,by="State"),ZIP,by=c("City"="city","state"="state")) %>%
select(-state)
str(FINAL.VIOLENT)
View(FINAL.VIOLENT)
View(ZIP)
View(VIOLENT3)
View(FINAL.VIOLENT)
View(STATE_ABBREV)
View(ZIP)
View(CENSUS)
View(CENSUS)
CENSUS.FIX=mutate(CENSUS,STATE=ifelse(STATE=="District of Columbia","District Of Columbia",STATE))
CENSUS.FIX=mutate(CENSUS,State=ifelse(State=="District of Columbia","District Of Columbia",State))
STATE_ABBREV.FIX = rbind(STATE_ABBREV,c("District Of Columbia","DC"))
View(CENSUS)
STATE_ABBREV.FIX = rbind(STATE_ABBREV,c("District Of Columbia","DC"))
left_join(VIOLENT4,STATE_ABBREV.FIX,by="State")
FINAL.VIOLENT.FIX = left_join(left_join(VIOLENT4,STATE_ABBREV.FIX,by="State"),ZIP,by=c("City"="city","state"="state")) %>%
select(-state)
FINAL.VIOLENT.FIX = left_join(left_join(VIOLENT4,STATE_ABBREV.FIX,by="State"),ZIP,by=c("City"="city","state"="state")) %>%
select(-state)
View(FINAL.VIOLENT.FIX)
FINAL.VIOLENT.FIX = left_join(VIOLENT3,CENSUS.FIX,by=c("State"="State","City"="Name")) %>%
left_join(STATE_ABBREV.FIX,by="State") %>%
left_join(ZIP,by=c("City"="city","state"="state")) %>%
select(-state)
View(FINAL.VIOLENT.FIX)
CENSUS.FIX=mutate(CENSUS,State=ifelse(State=="District of Columbia","District Of Columbia",State))
STATE_ABBREV.FIX = rbind(STATE_ABBREV,c("District Of Columbia","DC"))
FINAL.VIOLENT.FIX = left_join(VIOLENT3,CENSUS.FIX,by=c("State"="State","City"="Name")) %>%
left_join(STATE_ABBREV.FIX,by="State") %>%
left_join(ZIP,by=c("City"="city","state"="state")) %>%
select(-state)
filter(FINAL.VIOLENT.FIX,City=="Washington",State=="District Of Columbia")
knitr::opts_chunk$set(echo = TRUE,warning=F)
options(scipen=999)
library(tidyverse)    #Essential Functions
library(Ecdat)        #Contains Economic Datasets
x = 3
if(x > 0){
print(log(x))
}
x = -3
if(x > 0){
print(log(x))
}
x = 3
if(x > 0){
print(log(x))
}
x = -3
if(x > 0){
print(log(x))
}
x = 3
if(x > 0){
print(log(x))
}
x = -3
if(x > 0){
print(log(x))
}
log(-3)
log(0)
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
message("Unable to Take Logarithm")
}
log(-3)
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
message("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
error("Unable to Take Logarithm")
}
?message
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warningCondition("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warnings("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
errorCondition("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
message("Unable to Take Logarithm",classes="warning")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
message("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x=c(-1,3,200)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x=c(-1,3,200)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x=c(1,-3,200)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x > 0
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x=c(-1,3,200)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x>0
y2 = ifelse(x>0,log(x),NA)
print(y2)
x=rnorm(1000,mean=0,sd=1)
y=ifelse(abs(x)<1,"Within 1 SD",ifelse(abs(x)>2,"Far Far Away","Between 1 and 2 SD"))
x=rnorm(1000,mean=0,sd=1)
y=ifelse(abs(x)<1,"Within 1 SD",ifelse(abs(x)>2,"Far Far Away","Between 1 and 2 SD"))
y.fct=factor(y,levels=c("Within 1 SD","Between 1 and 2 SD","Far Far Away"))
ggplot() +
geom_bar(aes(x=y.fct),fill="lightskyblue1") +
theme_minimal()
y
ggplot() +
geom_bar(aes(x=y.fct),fill="lightskyblue1") +
theme_minimal()
a=10 #Any Number
r=0.9 #Any Number Between -1 and 1: abs(r)<1
theoretical.limit=a/(1-r)
START=a
FINISH.1 = START + a*r^1
FINISH.2 = FINISH.1 + a*r^2
FINISH.3 = FINISH.2 + a*r^3
FINISH.10 = a
for(k in 1:10){
FINISH.10=FINISH.10+a*r^k
}
FINISH.100 = a
for(k in 1:100){
FINISH.100=FINISH.100+a*r^k
}
DATA = tibble(k=c(1,2,3,10,100,"Infinity"),
SUMMATION=c(FINISH.1,FINISH.2,FINISH.3,
FINISH.10,FINISH.100,
theoretical.limit))
print(DATA)
ABSOLUTE.ERROR = abs(FINISH.100-theoretical.limit)
print(ABSOLUTE.ERROR)
a=10 #Any Number
r=0.9 #Any Number Between -1 and 1: abs(r)<1
theoretical.limit=a/(1-r)
START=a
FINISH.1 = START + a*r^1
FINISH.2 = FINISH.1 + a*r^2
FINISH.3 = FINISH.2 + a*r^3
FINISH.10 = a
for(k in 1:10){
FINISH.10=FINISH.10+a*r^k
}
FINISH.100 = a
for(k in 1:100){
FINISH.100=FINISH.100+a*r^k
}
DATA = tibble(k=c(1,2,3,10,100,"Infinity"),
SUMMATION=c(FINISH.1,FINISH.2,FINISH.3,
FINISH.10,FINISH.100,
theoretical.limit))
print(DATA)
ABSOLUTE.ERROR = abs(FINISH.100-theoretical.limit)
print(ABSOLUTE.ERROR)
FINISH.10 = a
for(k in 1:10){
FINISH.10=FINISH.10+a*r^k
}
FINISH.10
FINISH.10 = a
FINISH.10
FINISH.10 = a
for(k in 1:10){
FINISH.10=FINISH.10+a*r^k
}
FINISH.1
FINISH.10
1e-10
1e-10
a=10
r=0.9
FINISH=a
k=0
while(abs(FINISH-a/(1-r)) > 1e-10) {
k=k+1
FINISH = FINISH + a*r^k
if(k>100) break
}
print(c(k,FINISH))
a=10
r=0.9
FINISH=a
k=0
while(abs(FINISH-a/(1-r)) > 1e-10) {
k=k+1
FINISH = FINISH + a*r^k
#if(k>100) break
}
print(c(k,FINISH))
a=10
r=1.9
FINISH=a
k=0
while(abs(FINISH-a/(1-r)) > 1e-10) {
k=k+1
FINISH = FINISH + a*r^k
if(k>100) break
}
print(c(k,FINISH))
a=10
r=-0.75
theoretical.limit=a/(1-r)
K=10 #How Many Steps Do You Want to Save?
summation=rep(NA,(K+1))
summation
summation[1]=a
summation
summation
for (k in 1:K) {
summation[k+1]=summation[k] + a*r^k
}
summation
theoretical.limi
theoretical.limit
a=10
r=-0.75
theoretical.limit=a/(1-r)
K=100 #How Many Steps Do You Want to Save?
summation=rep(NA,(K+1))
summation[1]=a
for (k in 1:K) {
summation[k+1]=summation[k] + a*r^k
}
summation
a=10
r=-0.75
theoretical.limit=a/(1-r)
K=100 #How Many Steps Do You Want to Save?
summation=rep(NA,(K+1))
summation[1]=a
for (k in 1:K) {
summation[k+1]=summation[k] + a*r^k
}
ggplot() +
geom_line(aes(x=1:(K+1),y=summation)) +
geom_hline(yintercept=theoretical.limit,
linetype="dashed")
