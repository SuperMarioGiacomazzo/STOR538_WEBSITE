library(tidyverse)
library(readxl)
#Read in Actual Results
setwd("D:/Mario Documents/UNC/STOR 538/Not for Github/PLAYOFF2")
Actual=read.csv("Actual.csv")
Actual$Spread=Actual$Home.Score-Actual$Visitor.Score
Actual$Total=Actual$Home.Score+Actual$Visitor.Score
Actual$Result=ifelse(Actual$Spread>0,1,0)
#Read in Predictions from Groups
setwd("D:/Mario Documents/UNC/STOR 538/Not for Github/PLAYOFF2/Predictions")
group1=read.csv("Prediction_1.csv")
group2=read.csv("Prediction_2.csv")
group3=read.csv("Prediction_3.csv")
group4=read_xls("Prediction_4.xls")
group5=read_xlsx("Prediction_5.xlsx")
group6=read.csv("Prediction_6.csv")
group7=read.csv("Prediction_7.csv")
group8=read.csv("Prediction_8.csv")
group9=read.csv("Prediction_9.csv")
group10=read.csv("Prediction_10.csv")
group11=read.csv("Prediction_11.csv")
group12=read.csv("Prediction_12.csv")
group13=read.csv("Prediction_13.csv")
group14=read.csv("Prediction_14.csv")
#Modify Tables for Usage
Spread=tibble(Date=Actual$Date,Home=Actual$Home.Team,Away=Actual$Away.Team,Actual=Actual$Spread,
group1=group1$Spread,group2=group2$Spread,
group3=group3$Spread,group4=group4$Spread,
group5=group5$Spread,group6=group6$Spread,
group7=group7$Spread,group8=group8$Spread,
group9=group9$Spread,group10=group10$Spread,
group11=group11$Spread,group12=group12$Spread,
group13=group13$Spread,group14=group14$Spread)
Total=tibble(Date=Actual$Date,Home=Actual$Home.Team,Away=Actual$Away.Team,Actual=Actual$Total,
group1=group1$Total,group2=group2$Total,
group3=group3$Total,group4=group4$Total,
group5=group5$Total,group6=group6$Total,
group7=group7$Total,group8=group8$Total,
group9=group9$Total,group10=group10$Total,
group11=group11$Total,group12=group12$Total,
group13=group13$Total,group14=group14$Total)
Result=tibble(Date=Actual$Date,Home=Actual$Home.Team,Away=Actual$Away.Team,Actual=Actual$Result,
group1=group1$Result,group2=group2$Result,
group3=group3$Result,group4=group4$Result,
group5=group5$Result,group6=group6$Result,
group7=group7$Result,group8=group8$Result,
group9=group9$Result,group10=group10$Result,
group11=group11$Result,group12=group12$Result,
group13=group13$Result,group14=group14$Result)
Result$group4=as.numeric(Result$group4)
#Functions for Evaluating Prediction Error
rmse.func=function(actual,predict){
return(sqrt(mean((actual-predict)^2,na.rm=T)))
}
mae.func=function(actual,predict){
return(mean(abs(actual-predict),na.rm=T))
}
acc.func=function(actual,predict){
return(mean(actual==predict,na.rm=T))
}
#Usage of Error Functions for Week 1
spread.final=apply(Spread[,c(5:18)],2,rmse.func,actual=Spread$Actual)
total.final=apply(Total[,5:18],2,mae.func,actual=Total$Actual)
result.final=apply(Result[,5:18],2,acc.func,actual=Result$Actual)
rmse.func(actual=Spread$Actual,predict=Spread$group1)
spread.order=rank(as.numeric(spread.final))
total.order=rank(as.numeric(total.final))
result.order=rank(-as.numeric(result.final),ties.method="min")
setwd("D:/Mario Documents/UNC/STOR 538/Not for Github/PLAYOFF2")
write.csv(Spread,"ClassSpread.csv")
write.csv(Total,"ClassTotal.csv")
write.csv(Result,"ClassResult.csv")
setwd("D:/Mario Documents/UNC/STOR 538/STOR538_WEBSITE/Playoffs/Round 2")
write.csv(Spread,"PredictSpread.csv",row.names=F)
write.csv(Total,"PredictTotal.csv",row.names=F)
write.csv(Result,"PredictResult.csv",row.names=F)
library(nbastatR)
devtools::install_github("abresler/nbastatR")
library(nbastatR)
warnings()
get_nba_current_season_schedule()
library(nbastatR)
get_nba_current_season_schedule()
library("nbastatR")
get_nba_current_season_schedule()
install.packages("NBAloveR")
devtools::install_github("abresler/nbastatR")
devtools::install_github("abresler/nbastatR", force=T)
nbastatR
library(nbastatR)
game_logs(
seasons=2022,
league="NBA",
result_types="team"
)
OUT=game_logs(
seasons=2022,
league="NBA",
result_types="team"
)
View(OUT)
box_scores(
)
OUT=box_scores(
)
game_logs(
seasons = 2022,
league = "NBA",
result_types = "player",
season_types = "Regular Season",
nest_data = F,
assign_to_environment = TRUE,
return_message = TRUE,
...
)
game_logs(
seasons = 2022,
league = "NBA",
result_types = "player",
season_types = "Regular Season",
nest_data = F,
assign_to_environment = TRUE,
return_message = TRUE
)
OUT=game_logs(
seasons = 2023,
league = "NBA",
result_types = "player",
season_types = "Regular Season",
nest_data = F,
assign_to_environment = TRUE,
return_message = TRUE
)
Sys.setenv("VROOM_CONNECTION_SIZE")
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
OUT=game_logs(
seasons = 2023,
league = "NBA",
result_types = "player",
season_types = "Regular Season",
nest_data = F,
assign_to_environment = TRUE,
return_message = TRUE
)
View(OUT)
OUT=box_scores(gameids=c(22200033)
)
OUT=box_scores(game_ids=c(22200033)
)
View(OUT)
OUT=box_scores(game_ids=c(22200033),
box_score_types=c("Traditional"),
result_types=c("team")
)
OUT=box_scores(game_ids=c(22200033),
box_score_types="Traditional",
result_types="team"
)
View(OUT)
OUT=unnest(box_scores(game_ids=c(22200033),
box_score_types="Traditional",
result_types="team"
))
box_scores(game_ids=c(22200033),
box_score_types="Traditional",
result_types="team"
)[[1]]
library(tidyverse)
OUT=unnest(box_scores(game_ids=c(22200033),
box_score_types="Traditional",
result_types="team"
))
View(OUT)
16/31
OUT=game_logs(
seasons = 2023,
league = "NBA",
result_types = "player",
season_types = "Regular Season",
nest_data = F,
assign_to_environment = TRUE,
return_message = TRUE
)
View(OUT)
OUT=game_logs(
seasons = 2023,
league = "NBA",
result_types = "team",
season_types = "Regular Season",
nest_data = F,
assign_to_environment = TRUE,
return_message = TRUE
)
View(OUT)
View(OUT)
BOX2023=unnest(box_scores(game_ids=c(22200033),
box_score_types="Traditional",
result_types="team"
))
View(BOX2023)
spread_data(GAME2023)
GAME2023=game_logs(
seasons = 2023,
league = "NBA",
result_types = "team",
season_types = "Regular Season",
nest_data = F,
assign_to_environment = TRUE,
return_message = TRUE
)
#Box Score Data for Individual Game
BOX2023=unnest(box_scores(game_ids=c(22200033),
box_score_types="Traditional",
result_types="team"
))
spread_data(GAME2023)
nba_teams
nba_teams()
nba_teams(league="NBA")
TEAM=nba_teams(league="NBA")
View(TEAM)
TEAM=filter(nba_teams(league="NBA"), idLeague==2)
View(TEAM)
TEAM=filter(nba_teams(league="NBA"), idLeague==3)
TEAM=filter(nba_teams(league="NBA"), idLeague==1)
TEAM=filter(nba_teams(league="NBA"), idLeague==2)
TEAM=filter(nba_teams(league="NBA"), idLeague==3)
TEAM=filter(nba_teams(league="NBA"), idLeague==4)
TEAM=filter(nba_teams(league="NBA"), idLeague==5)
TEAM=filter(nba_teams(league="NBA"))
View(TEAM)
TEAM=filter(nba_teams(league="NBA"),IsNonNBATeam==0)
View(TEAM)
TEAM=filter(nba_teams(league="NBA"),IsNonNBATeam==0,yearPlayedLast==2022)
TEAM=filter(nba_teams(league="NBA"),yearPlayedLast==2022)
View(TEAM)
TEAM=filter(nba_teams(league="NBA"),yearPlayedLast==2022,idLeague==2)
View(TEAM)
TEAM=select(filter(nba_teams(league="NBA"),yearPlayedLast==2022,idLeague==2),
nameTeam)
filter(nba_teams(league="NBA"),yearPlayedLast==2022,idLeague==2)
TEAM=nba_teams(league="NBA") %>%
filter(yearPlayedLast==2022,idLeague==2) %>%
select(name_Team)
TEAM=nba_teams(league="NBA") %>%
filter(yearPlayedLast==2022,idLeague==2)
TEAM=nba_teams(league="NBA") %>%
filter(yearPlayedLast==2022,idLeague==2) %>%
select(nameTeam,idTeam,slugTeam)
TEAM
#Get NBA Teams
TEAM=nba_teams(league="NBA") %>%
filter(yearPlayedLast==2022,idLeague==2) %>%
select(nameTeam,idTeam,slugTeam)
View(TEAM)
library(nbastatR)
library(nbastatR)
library(tidyverse)
library(nbastatR)
library(tidyverse)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
#Get NBA Teams
TEAM=nba_teams(league="NBA") %>%
filter(yearPlayedLast==2022,idLeague==2) %>%
select(nameTeam,idTeam,slugTeam)
TEAM
View(TEAM)
nba_teams(league="NBA") %>%
filter(yearPlayedLast==2022,idLeague==2)
TEAM=nba_teams(league="NBA") %>%
filter(yearPlayedLast==2022,idLeague==2)
View(TEAM)
