}
}
print(OUT.RMSE) #DO NOT CHANGE
OUT.RMSE2=as.tibble(OUT.RMSE) %>%
mutate(I=1:7) %>%
rename(`1`=V1,`2`=V2,`3`=V3,`4`=V4,`5`=V5,`6`=V6,`7`=V7) %>%
select(I,everything()) %>%
gather(`1`:`7`,key="J",value="RMSE",convert=T) %>%
mutate(I=as.factor(I),J=as.factor(J))
head(OUT.RMSE2)
BEST5.RMSE = OUT.RMSE2 %>% filter(min_rank(RMSE)<=5)
head(BEST5.RMSE) #DO NOT CHANGE
ggplot(DATA) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
theme_minimal() +
xlab("Julian Day")+
ylab("Max Water Temperature")
BEST5.DATA=DATA %>%
mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[1]))+poly(D,as.numeric(BEST5.RMSE$J[1])),data=DATA)),
Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[2]))+poly(D,as.numeric(BEST5.RMSE$J[2])),data=DATA)),
Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[3]))+poly(D,as.numeric(BEST5.RMSE$J[3])),data=DATA)),
Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[4]))+poly(D,as.numeric(BEST5.RMSE$J[4])),data=DATA)),
Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[5]))+poly(D,as.numeric(BEST5.RMSE$J[5])),data=DATA)))
BEST5.DATA=DATA %>%
mutate(First=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[1]))+poly(D,as.numeric(BEST5.RMSE$J[1])),data=DATA)),
Second=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[2]))+poly(D,as.numeric(BEST5.RMSE$J[2])),data=DATA)),
Third=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[3]))+poly(D,as.numeric(BEST5.RMSE$J[3])),data=DATA)),
Fourth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[4]))+poly(D,as.numeric(BEST5.RMSE$J[4])),data=DATA)),
Fifth=predict(lm(W~poly(A,as.numeric(BEST5.RMSE$I[5]))+poly(D,as.numeric(BEST5.RMSE$J[5])),data=DATA)))
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
theme_minimal() +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
OUT.RMSE2 %>%
group_by(I) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgRMSE))+
geom_line(aes(x=I,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(J) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=J,y=avgRMSE))+
geom_line(aes(x=J,y=avgRMSE,group=1)) +
theme_minimal()
BEST.func=function(data){
loc=which.min(data$RMSE)
return(as.numeric(as.vector(data[loc,c(1,2)])))
}
BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
DATA %>% mutate(fitted=predict(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=W,y=fitted)) +
xlab("Actual Max Water Temperature") +
ylab("Fitted Max Water Temperature") +
geom_abline(a=0,b=1,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_hline(yintercept=0,color="blue")
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_hline(yintercept=0,color="blue")
BEST5.DATA2
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
View(BEST5.DATA2)
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
ggplot(BEST5.DATA2) +
geom_point(aes(x=D,y=W),alpha=0.05,stroke=0) +
xlab("Julian Day")+
ylab("Max Water Temperature") +
geom_line(aes(x=D,y=Predict,color=Model))
OUT.RMSE2 %>%
group_by(I) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgRMSE))+
geom_line(aes(x=I,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(J) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=J,y=avgRMSE))+
geom_line(aes(x=J,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(I) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=I,y=avgRMSE))+
geom_line(aes(x=I,y=avgRMSE,group=1)) +
theme_minimal()
OUT.RMSE2 %>%
group_by(J) %>%
summarize(avgRMSE=mean(RMSE))%>%
ungroup() %>%
ggplot() +
geom_point(aes(x=J,y=avgRMSE))+
geom_line(aes(x=J,y=avgRMSE,group=1)) +
theme_minimal()
View(OUT.RMSE2)
BEST.func=function(data){
loc=which.min(data$RMSE)
return(as.numeric(as.vector(data[loc,c(1,2)])))
}
BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
DATA %>% mutate(fitted=predict(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=W,y=fitted)) +
xlab("Actual Max Water Temperature") +
ylab("Fitted Max Water Temperature") +
geom_abline(a=0,b=1,color="red")
BEST.func=function(data){
loc=which.min(data$RMSE)
return(as.numeric(as.vector(data[loc,c(1,2)])))
}
BEST.CHOICE=BEST.func(data=OUT.RMSE2) #DO NOT CHANGE
print(BEST.CHOICE) #DO NOT CHANGE
DATA %>% mutate(res=residuals(train.model.func(DATA,I=BEST.CHOICE[1],J=BEST.CHOICE[2]))) %>%
ggplot() +
geom_point(aes(x=D,y=res)) +
xlab("Day") +
ylab("Residual") +
geom_hline(yintercept=0,color="red")
-6/(20/sqrt(14))
-6/(20/sqrt(94))
sqrt(4*9-9)
sqrt(4*9-9)
sqrt(4*9+9)
(1-0.41)^5*0.41
(1-0.41)^4*0.41
n=500
p=0.41
n*p
z=(250-n*p)/(sqrt(n*p*(1-p)))
z
n*p*(1-p)
p*(1-p)
z=(250-n*p)/(sqrt(n*p*(1-p)))
z
dnorm(z)
z
n*p
250-n*p
n*p*(1-p)
z=(250-n*p)/(
)
sqrt(n*p*(1-p))
dnorm(z)
z
dnorm(z)
?dnorm
pnorm(z)
pnorm(z)*100
z
10/sqrt(100)
n=(10/0.05)^2
n
n=(10/0.04)^2
n=(10/0.25)^2
n=(10/0.22)^2
(10/0.22)^2
(74-75)/(10/sqrt(4))
(74-75)/(10/sqrt(4))
pnorm(-0.2)
pnorm(0.2)
pnorm(0.2)-pnorm(-0.2)
pnorm(0.2)
pnorm(0.2)-pnorm(-0.2)
pnorm(-0.2)
pnorm(0.2)
pnorm(0.2)-pnorm(-0.2)
57.93-42.07
pnorm(0.2)-pnorm(-0.2)
pnorm(-0.2)
pnorm(0.2)
pnorm(-0.2)
pnorm(0.2)
57.93-42.07
1.5-1.96*(0.25/sqrt(50))
1.5+1.96*(0.25/sqrt(50))
1.5-1.96*(0.25/50)
1.5+1.96*(0.25/50)
2-1.96*(0.25/sqrt(50))
2+1.96*(0.25/sqrt(50))
(2-1.5)/(0.25/sqrt(50))
473.36/6
0.92^3
4*9+9
(1-0.41)^4*0.41
(43.51-55.82)
-12.31-2.07*sqrt(11.32^2/23+15.12^2/23)
-12.31+2.07*sqrt(11.32^2/23+15.12^2/23)
(42.52-56.82)-2.07*sqrt(11.31^2/23+16.12^2/23)
(42.52-56.82)-2.06*sqrt(11.31^2/23+16.12^2/23)
(44.51-57.83)-2.06*sqrt(13.32^2/23+14.11^2/23)
qt(0.975,22)
(44.51-57.83)-2.073873*sqrt(13.32^2/23+14.11^2/23)
-.559/8.875/sqrt(200)
-.559/(8.875/sqrt(200))
-.559/8.875
-.559/(8.875/sqrt(200))
(43.52-56.81)/sqrt(11.32^2/23+14.13^2/23)
qt(0.975,499)
qt(0.975,500)
0.0036*2
x=1300+1250+1350+1400+1425
x/5
13.2-0.9*12
0.8*250
0.12/0.2
532/23
5*125
5*25
125/60
7*25
175/60
(950+1100)/2
(1300+1420)/2
mean(c(670,950,1100,1120,1200,1250,1300,1420,1800))
sum(c(670,950,1100,1120,1200,1250,1300,1420,1800))
sum(c(670,950,1100,1120,1200,1250,1300,1420,1800))/9
sum(c(670,950,1100,1120,1200,1250,1300,1420,1800))/8
IQR=1360-1025
1025-1.5*335
1360+1.5*335
(485-450)/25
(415-450)/25
(450-430)/25
100-78.81
0.03*25+450
-0.03*25+450
141/445
85/445
x=0.07+0.37+1.88+0.19+-0.84+-1.14+-0.54
x
1-x
x=0.07+0.37+1.88+0.19+-0.84+-1.14
x
(60-68.86)/16.56
x=0.06+0.36+1.88+0.18+-0.85+-1.15
x
x=0.07+0.37+1.88+0.19+-0.84+-0.54
x
x=0.07+0.37+1.88+0.19+-0.84+-0.54+-1.14
x
0.1029/-0.19
x=0.069+0.371+1.88+0.19+-0.837+-1.139
x
x=0.069+0.371+1.88+0.19+-0.837+-1.139+-0.535
x
x=0.069+0.371+1.88+0.19+-0.837+-0.535
x
0.8761/-0.769
4.8541/6
x
1-1.38
1-1.138
r=4.8541/6
4
r
xbar=11
ybar=68.86
sx=5.2
xy
sy=16.56
b1=r*sy/sx
b1
b1=r*sx/sy
b1
r
ybar-xbar*0.25
b1y=r*sy/sx
b1n=r*sy/sx
b1y
b1n
b1n=r*sx/sy
b1n
b0=ybar-b1y*xbar
ybar-b1y*xbar
ybar-2.58*xbar
b1y
b1n
68.86-(4.8541/6)*(sy/sx)*11
68.86-(2.58)*11
4.8541/6
(4.8541/6)*(sy/sx)
68.86-11*2.58
68.86-11*b1y
b1y
68.86-11*b1y
11-68.86*b1y
68.86-2.58*11
(415-450)/25
(430-415)/25
dnorm(0.6)
pnorm(0.6)
(430-450)/25
dnorm(-0.3)
dnorm(0)
pnorm(0)
pnorm(-0.8)
qnorm(1-0.5120)
-0.03*25+450
0.069+0.371+1.880+0.190-0.837-0.535
4.8541-6
4.8541/6
0.8090167^2
55-29
55-16
55-26
55-16
55-18
55-16
55*14
55-14
diff=7-5
df=250-1
tcrit=pt(0.975,249)
pt(0.975,249)
tcrit=pt(0.975,df=df)
tcrit
?pt
tcrit=qt(0.975,df=df)
tcrit
diff+tcrit*sqrt(20^2/250+12^2/250)
tcrit
diff+1.97*sqrt(20^2/250+12^2/250)
diff-1.97*sqrt(20^2/250+12^2/250)
diff+tcrit*sqrt(20^2/250+12^2/250)
diff-tcrit*sqrt(20^2/250+12^2/250)
2.5/sqrt(5)
180-800*0.25
z=(180-800*0.25)/sqrt(800*0.25*0.75)
z
1.22/sqrt(100)
n=(1.22/0.06)^2
n
1.22/0.06
z1=(9.28-9.48)/(1.22/sqrt(9))
z2=(9.68-9.48)/(1.22/sqrt(9))
z1
z2
0.6879-0.3121
1-0.7879
1-0.6879
1-0.3758
7.5-1.96*1.5/sqrt(80)
7.5+1.96*1.5/sqrt(80)
(7.5-8)/(1.5/sqrt(80))
1-.9986
0.458+0.050+2.947+0.516+0.001
3.972/4
3.972/5
0.993^2
z1=(175-170)/30
z2=(200-170)/30
z1
z2
1-0.1666667
z1a=(175-170)/(30/sqrt(8))
z2a=(200-170)/(30/sqrt(8))
z1a
z2a
2.82-0.47
0.7967-0.5675
0.8413-0.5675
z1a
z2a
0.9977-0.6808
0.31*30+170
z1=(175-170)/200
z1=(175-170)/30
z2=(200-170)/30
z1
z2
pnorm(z1)
pnorm(z2)-pnorm(z1)
z2
z1
round(pnorm(z2),4)-round(pnorm(z1),4)
z1
round(pnorm(z2),4)
round(pnorm(z1),4)
pnorm(round(z2,2))-pnorm(round(z1,2))
(1.96/0.05)^2*0.64*(1-0.64)
(1.96/0.05)^2*0.5*(1-0.5)
(1.96/0.04)^2*0.64*(1-0.64)
0.5*(0.5)/.02
12.5^2
.5*.5/(.02)^2
.5*.5/(.02)^2
45-9.5
35.5/45
mean(c(0,0,2,3))
mean(c(3,3,2,3))
3-1.25
38-1.75-3
mean(c(3,2,1,3))
3-2.25
mean(c(3,3,1,1))
3+3+3+2
11/4
6/4
3-1.5
1+3+3+3
10/4
2+1+2+0
5/4
3-1.25
2+1.5+3+3
9.5/4
1-2.375
1.5+3+3+3
10.5/4
1-2.625
3-2.625
1+2+3+3
9/4
library(tidyverse)
library(readxl)
#Read in Actual Results
setwd("D:/Mario Documents/UNC/STOR 390/Not for Github/FA2019_PLAYOFF2")
Actual=read.csv("Actual.csv")
#Read in Predictions from Groups
setwd("D:/Mario Documents/UNC/STOR 390/Not for Github/FA2019_PLAYOFF2/Predictions")
group1=read_xlsx("Group1.xlsx")
group2=read.csv("Group2.csv")
group3=read_xlsx("Group3.xlsx")
group4=read.csv("Group4.csv")
group5=read_xlsx("Group5.xlsx")
group6=read.csv("Group6.csv")
group7=read_xlsx("Group7.xlsx")
group8=read.csv("Group8.csv")
group9=read.csv("Group9.csv")
#Modify Tables for Usage
Spread=tibble(Date=Actual$Date,Home=Actual$Home.Team,Visitor=Actual$Visitor.Team,Actual=Actual$Spread,
group1=group1$Spread,group2=group2$Spread,
group3=group3$Spread,group4=group4$Spread,
group5=group5$Spread,group6=group6$Spread,
group7=group7$Spread,group8=group8$Spread,
group9=group9$Spread)
Total=tibble(Date=Actual$Date,Home=Actual$Home.Team,Visitor=Actual$Visitor.Team,Actual=Actual$Total,
group1=group1$Total,group2=group2$Total,
group3=group3$Total,group4=group4$Total,
group5=group5$Total,group6=group6$Total,
group7=group7$Total,group8=group8$Total,
group9=group9$Total)
Result=tibble(Date=Actual$Date,Home=Actual$Home.Team,Visitor=Actual$Visitor.Team,Actual=Actual$Result,
group1=group1$Result,group2=ifelse(group2$Result==1,"W","L"),
group3=ifelse(group3$Result==1,"W","L"),group4=ifelse(group4$Result==1,"W","L"),
group5=ifelse(group5$Result==1,"W","L"),group6=ifelse(group6$Result==1,"W","L"),
group7=ifelse(group7$Result==1,"W","L"),group8=ifelse(group8$Result==1,"W","L"),
group9=ifelse(group9$Result==1,"W","L"))
#Functions for Evaluating Prediction Error
rmse.func=function(actual,predict){
return(sqrt(mean((actual-predict)^2,na.rm=T)))
}
mae.func=function(actual,predict){
return(mean(abs(actual-predict),na.rm=T))
}
acc.func=function(actual,predict){
return(mean(actual==predict,na.rm=T))
}
#Usage of Error Functions for Week 1
spread.final=apply(Spread[,5:13],2,rmse.func,actual=Spread$Actual)
total.final=apply(Total[,5:13],2,mae.func,actual=Total$Actual)
result.final=apply(Result[,5:13],2,acc.func,actual=Result$Actual)
spread.order=rank(as.numeric(spread.final))
total.order=rank(as.numeric(total.final))
result.order=rank(-as.numeric(result.final),ties.method="min")
setwd("D:/Mario Documents/UNC/STOR 390/Not for Github/FA2019_PLAYOFF2")
write.csv(Spread,"ClassSpread.csv")
write.csv(Total,"ClassTotal.csv")
write.csv(Result,"ClassResult.csv")
set.seed(216)
new.order=c(1,2,3,4,sample(5:13,9))
Spread.student=Spread[,new.order]
Total.student=Total[,new.order]
Result.student=Result[,new.order]
names(Spread.student)=c(names(Spread)[1:4],rep(1:9))
names(Total.student)=c(names(Spread)[1:4],rep(1:9))
names(Result.student)=c(names(Spread)[1:4],rep(1:9))
setwd("D:/Mario Documents/UNC/STOR 390/STOR390_WEBSITE/Playoffs/Round 2")
write.csv(Spread.student,"PredictSpread.csv",row.names=F)
write.csv(Total.student,"PredictTotal.csv",row.names=F)
write.csv(Result.student,"PredictResult.csv",row.names=F)
