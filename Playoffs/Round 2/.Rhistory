message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warningCondition("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warnings("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
errorCondition("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
message("Unable to Take Logarithm",classes="warning")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
message("Unable to Take Logarithm")
}
x = 3
if(x > 0){
print(log(x))
} else{
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
message("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x = -3
if(x > 0){
print(log(x))
} else {
warning("Unable to Take Logarithm")
}
x=c(-1,3,200)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x=c(-1,3,200)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x=c(1,-3,200)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x > 0
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x=c(-1,3,200)
print(log(x))
y1 =  if(x > 0){
log(x)
} else{
NA
}
print(y1)
x>0
y2 = ifelse(x>0,log(x),NA)
print(y2)
x=rnorm(1000,mean=0,sd=1)
y=ifelse(abs(x)<1,"Within 1 SD",ifelse(abs(x)>2,"Far Far Away","Between 1 and 2 SD"))
x=rnorm(1000,mean=0,sd=1)
y=ifelse(abs(x)<1,"Within 1 SD",ifelse(abs(x)>2,"Far Far Away","Between 1 and 2 SD"))
y.fct=factor(y,levels=c("Within 1 SD","Between 1 and 2 SD","Far Far Away"))
ggplot() +
geom_bar(aes(x=y.fct),fill="lightskyblue1") +
theme_minimal()
y
ggplot() +
geom_bar(aes(x=y.fct),fill="lightskyblue1") +
theme_minimal()
a=10 #Any Number
r=0.9 #Any Number Between -1 and 1: abs(r)<1
theoretical.limit=a/(1-r)
START=a
FINISH.1 = START + a*r^1
FINISH.2 = FINISH.1 + a*r^2
FINISH.3 = FINISH.2 + a*r^3
FINISH.10 = a
for(k in 1:10){
FINISH.10=FINISH.10+a*r^k
}
FINISH.100 = a
for(k in 1:100){
FINISH.100=FINISH.100+a*r^k
}
DATA = tibble(k=c(1,2,3,10,100,"Infinity"),
SUMMATION=c(FINISH.1,FINISH.2,FINISH.3,
FINISH.10,FINISH.100,
theoretical.limit))
print(DATA)
ABSOLUTE.ERROR = abs(FINISH.100-theoretical.limit)
print(ABSOLUTE.ERROR)
a=10 #Any Number
r=0.9 #Any Number Between -1 and 1: abs(r)<1
theoretical.limit=a/(1-r)
START=a
FINISH.1 = START + a*r^1
FINISH.2 = FINISH.1 + a*r^2
FINISH.3 = FINISH.2 + a*r^3
FINISH.10 = a
for(k in 1:10){
FINISH.10=FINISH.10+a*r^k
}
FINISH.100 = a
for(k in 1:100){
FINISH.100=FINISH.100+a*r^k
}
DATA = tibble(k=c(1,2,3,10,100,"Infinity"),
SUMMATION=c(FINISH.1,FINISH.2,FINISH.3,
FINISH.10,FINISH.100,
theoretical.limit))
print(DATA)
ABSOLUTE.ERROR = abs(FINISH.100-theoretical.limit)
print(ABSOLUTE.ERROR)
FINISH.10 = a
for(k in 1:10){
FINISH.10=FINISH.10+a*r^k
}
FINISH.10
FINISH.10 = a
FINISH.10
FINISH.10 = a
for(k in 1:10){
FINISH.10=FINISH.10+a*r^k
}
FINISH.1
FINISH.10
1e-10
1e-10
a=10
r=0.9
FINISH=a
k=0
while(abs(FINISH-a/(1-r)) > 1e-10) {
k=k+1
FINISH = FINISH + a*r^k
if(k>100) break
}
print(c(k,FINISH))
a=10
r=0.9
FINISH=a
k=0
while(abs(FINISH-a/(1-r)) > 1e-10) {
k=k+1
FINISH = FINISH + a*r^k
#if(k>100) break
}
print(c(k,FINISH))
a=10
r=1.9
FINISH=a
k=0
while(abs(FINISH-a/(1-r)) > 1e-10) {
k=k+1
FINISH = FINISH + a*r^k
if(k>100) break
}
print(c(k,FINISH))
a=10
r=-0.75
theoretical.limit=a/(1-r)
K=10 #How Many Steps Do You Want to Save?
summation=rep(NA,(K+1))
summation
summation[1]=a
summation
summation
for (k in 1:K) {
summation[k+1]=summation[k] + a*r^k
}
summation
theoretical.limi
theoretical.limit
a=10
r=-0.75
theoretical.limit=a/(1-r)
K=100 #How Many Steps Do You Want to Save?
summation=rep(NA,(K+1))
summation[1]=a
for (k in 1:K) {
summation[k+1]=summation[k] + a*r^k
}
summation
a=10
r=-0.75
theoretical.limit=a/(1-r)
K=100 #How Many Steps Do You Want to Save?
summation=rep(NA,(K+1))
summation[1]=a
for (k in 1:K) {
summation[k+1]=summation[k] + a*r^k
}
ggplot() +
geom_line(aes(x=1:(K+1),y=summation)) +
geom_hline(yintercept=theoretical.limit,
linetype="dashed")
A9=(4*1+1*2+0*3+3*4)/20
A9
A9=(4*1+1*2+0*3+3*4)/15
A9
A12=815^2/(815^2+730^2)
A9
A14 = 10*0.705947
A14
a=4329-400
a
a
b=a/4239
b
a=4329-429
b=a/4239
b
296*b+40
#Q1
A1="Ben Alamar"
#Q2
A2="FALSE"
#Q3
A3="FALSE"
#Q4
A4=16
#Q5
A5="Baseball Research Journal"
#Q6
A6="Baseball Abstracts"
#Q7
A7="FALSE"
#Q8
A8="FALSE"
#Q9
A9=(4*1+1*2+0*3+3*4)/15
#Q10
A10="FALSE"
#Q11
A11="FALSE"
#Q12
A12=815^2/(815^2+730^2)
#Q13
A13 = "Caught Stealing (CS) and Stolen Bases (SB)"
#Q14
A14 = 10*0.705947
#Q15
a=4329-429
b=a/4239
A15 = 296*b+40
c(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)
#Q1
A1="Ben Alamar"
#Q2
A2="FALSE"
#Q3
A3="FALSE"
#Q4
A4=16
#Q5
A5="Baseball Research Journal"
#Q6
A6="Baseball Abstracts"
#Q7
A7="FALSE"
#Q8
A8="FALSE"
#Q9
A9=(4*1+1*2+0*3+3*4)/15
#Q10
A10="FALSE"
#Q11
A11="FALSE"
#Q12
A12=815^2/(815^2+730^2)*162
#Q13
A13 = "Caught Stealing (CS) and Stolen Bases (SB)"
#Q14
A14 = 10*0.705947
#Q15
a=4329-429
b=a/4239
A15 = 296*b+40
c(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)
| Group Number | Time |
|:-----------:|:------:|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|1|8AM - 8:15AM|
|||
library(DT)
library(tidyverse)
library(readxl)
setwd("D:/Mario Documents/UNC/STOR 538/STOR538_WEBSITE/Playoffs/Round 2")
Actual=read.csv(file="Actual.csv")[-(1:25),]
library(DT)
library(tidyverse)
library(readxl)
setwd("D:/Mario Documents/UNC/STOR 538/STOR538_WEBSITE/Playoffs/Round 2")
Actual=read.csv(file="Actual.csv")[-(1:25),]
P1=read.csv(file="Predictions_1.csv")[-(1:25),]
P1=read.csv(file="Predictions_1.csv")[-(1:25),]
setwd("D:/Mario Documents/UNC/STOR 538/STOR538_WEBSITE/Playoffs/Round 2")
Actual=read.csv(file="Actual.csv")[-(1:25),]
P1=read.csv(file="Predictions_1.csv")[-(1:25),]
library(DT)
library(tidyverse)
library(readxl)
setwd("D:/Mario Documents/UNC/STOR 538/STOR538_WEBSITE/Playoffs/Round 2")
Actual=read.csv(file="Actual.csv")[-(1:25),]
P1=read.csv(file="Predictions_1.csv")[-(1:25),]
P2=read.csv(file="Predictions_2.csv")[-(1:25),-1]
P3=read.csv(file="Predictions_3.csv")[-(1:25),-1]
P4=read.csv(file="Predictions_4.csv")[-(1:25),-1]
P5=read.csv(file="Predictions_5.csv")[-(1:25),]
P6=read.csv(file="Predictions_6.csv")[-(1:25),]
P7=read.csv(file="Predictions_7.csv")[-(1:25),]
P8=read.csv(file="Predictions_8.csv")[-(1:25),]
P9=read.csv(file="Predictions_9.csv")[-(1:25),]
P10=read.csv(file="Predictions_10.csv")[-(1:25),]
P11=read.csv(file="Predictions_11.csv")[-(1:25),]
P12=read.csv(file="Predictions_12.csv")[-(1:25),]
P13=read.csv(file="Predictions_13.csv")[-(1:25),]
P13$Spread=as.numeric(P13$Spread)
P13$Total=as.numeric(P13$Total)
P13$OREB=as.numeric(P13$OREB)
P14=read.csv(file="Predictions_14.csv")[-(1:25),]
P15=read.csv(file="Predictions_15.csv")[-(1:25),]
P16=read.csv(file="Predictions_16.csv")[-(1:25),]
P17=read.csv(file="Predictions_17.csv")[-(1:25),]
SPREAD=cbind(P1$Spread,P2$Spread,P3$Spread,P4$Spread,
P5$Spread,P6$Spread,P7$Spread,P8$Spread,
P9$Spread,P10$Spread,P11$Spread,P12$Spread,
P13$Spread,P14$Spread,P15$Spread,P16$Spread,P17$Spread)
TOTAL=cbind(P1$Total,P2$Total,P3$Total,P4$Total,
P5$Total,P6$Total,P7$Total,P8$Total,
P9$Total,P10$Total,P11$Total,P12$Total,
P13$Total,P14$Total,P15$Total,P16$Total,P17$Total)
OREB=cbind(P1$OREB,P2$OREB,P3$OREB,P4$OREB,
P5$OREB,P6$OREB,P7$OREB,P8$OREB,
P9$OREB,P10$OREB,P11$OREB,P12$OREB,
P13$OREB,P14$OREB,P15$OREB,P16$OREB,P17$OREB)
rmse.func=function(prediction,actual){
sqrt(mean((actual-prediction)^2,na.rm=T))
}
SPREAD.RESULT=apply(SPREAD,2,rmse.func,actual=Actual$Spread)
TOTAL.RESULT=apply(TOTAL,2,rmse.func,actual=Actual$Total)
OREB.RESULT=apply(OREB,2,rmse.func,actual=Actual$OREB)
SPREAD.RESULT
FINAL.RESULT=tibble(Group=1:17,`Spread RMSE`=round(SPREAD.RESULT,2),`Spread Rank`=rank(SPREAD.RESULT),
`Total RMSE`=round(TOTAL.RESULT,2),`Total Rank`=rank(TOTAL.RESULT),
`OREB RMSE`=round(OREB.RESULT,2),`OREB Rank`=rank(OREB.RESULT))
library(DT)
library(tidyverse)
library(readxl)
setwd("D:/Mario Documents/UNC/STOR 538/STOR538_WEBSITE/Playoffs/Round 2")
Actual=read.csv(file="Actual.csv")[-(1:25),]
P1=read.csv(file="Predictions_1.csv")[-(1:25),]
P2=read.csv(file="Predictions_2.csv")[-(1:25),-1]
P3=read.csv(file="Predictions_3.csv")[-(1:25),-1]
P4=read.csv(file="Predictions_4.csv")[-(1:25),-1]
P5=read.csv(file="Predictions_5.csv")[-(1:25),]
P6=read.csv(file="Predictions_6.csv")[-(1:25),]
P7=read.csv(file="Predictions_7.csv")[-(1:25),]
P8=read.csv(file="Predictions_8.csv")[-(1:25),]
P9=read.csv(file="Predictions_9.csv")[-(1:25),]
P10=read.csv(file="Predictions_10.csv")[-(1:25),]
P11=read.csv(file="Predictions_11.csv")[-(1:25),]
P12=read.csv(file="Predictions_12.csv")[-(1:25),]
P13=read.csv(file="Predictions_13.csv")[-(1:25),]
P13$Spread=as.numeric(P13$Spread)
P13$Total=as.numeric(P13$Total)
P13$OREB=as.numeric(P13$OREB)
P14=read.csv(file="Predictions_14.csv")[-(1:25),]
P15=read.csv(file="Predictions_15.csv")[-(1:25),]
P16=read.csv(file="Predictions_16.csv")[-(1:25),]
P17=read.csv(file="Predictions_17.csv")[-(1:25),]
SPREAD=cbind(P1$Spread,P2$Spread,P3$Spread,P4$Spread,
P5$Spread,P6$Spread,P7$Spread,P8$Spread,
P9$Spread,P10$Spread,P11$Spread,P12$Spread,
P13$Spread,P14$Spread,P15$Spread,P16$Spread,P17$Spread)
TOTAL=cbind(P1$Total,P2$Total,P3$Total,P4$Total,
P5$Total,P6$Total,P7$Total,P8$Total,
P9$Total,P10$Total,P11$Total,P12$Total,
P13$Total,P14$Total,P15$Total,P16$Total,P17$Total)
OREB=cbind(P1$OREB,P2$OREB,P3$OREB,P4$OREB,
P5$OREB,P6$OREB,P7$OREB,P8$OREB,
P9$OREB,P10$OREB,P11$OREB,P12$OREB,
P13$OREB,P14$OREB,P15$OREB,P16$OREB,P17$OREB)
rmse.func=function(prediction,actual){
sqrt(mean((actual-prediction)^2,na.rm=T))
}
SPREAD.RESULT=apply(SPREAD,2,rmse.func,actual=Actual$Spread)
TOTAL.RESULT=apply(TOTAL,2,rmse.func,actual=Actual$Total)
OREB.RESULT=apply(OREB,2,rmse.func,actual=Actual$OREB)
FINAL.RESULT=tibble(Group=1:17,`Spread RMSE`=round(SPREAD.RESULT,2),`Spread Rank`=rank(SPREAD.RESULT),
`Total RMSE`=round(TOTAL.RESULT,2),`Total Rank`=rank(TOTAL.RESULT),
`OREB RMSE`=round(OREB.RESULT,2),`OREB Rank`=rank(OREB.RESULT))
datatable(FINAL.RESULT,class="display",options = list(scrollX=F,
columnDefs = list(list(className = 'dt-center', targets = 0:6))),rownames=F)
write.csv(SPREAD,"SPREAD.csv")
write.csv(TOTAL,"TOTAL.csv")
write.csv(OREB,"OREB.csv")
FINAL.RESULT
View(Actual)
